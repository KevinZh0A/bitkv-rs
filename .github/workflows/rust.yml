name: Rust CI

on:
  push:
    branches: ['*'] 
    paths-ignore:   
      # Don't run Clippy tests, when only textfiles were modified 
      - 'README.md'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**/*.md'
      - '**/*.txt'
      - '.gitignore'
  pull_request:
    paths-ignore:  
      # Don't run Clippy tests, when only textfiles were modified  
      - 'README.md'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**/*.md'
      - '**/*.txt'
      - '.gitignore'
  workflow_dispatch: 

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  nightly: nightly

jobs:
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable
        run: rustup update stable && rustup default stable
      - name: Apply clippy lints
        run: cargo clippy --all-features -- -D warnings

  unit-tests:
    name: unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [nightly]
        os: 
          - ubuntu-latest
          - macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: test all features
        # Run sequentially to avoid race condition around file system size
        run: cargo test --all-features -- --test-threads 1

  coverage:
    name: cargo tarpaulin
    runs-on: ubuntu-latest
    needs:
      - docs
      - unit-tests
      - clippy
      - rustfmt
    steps:
      - uses: actions/checkout@v4
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
      - name: Cache ~/.cargo
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-coverage-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-coverage-cargo-build-target
      - name: Run tarpaulin
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --all-features --run-types tests --run-types doctests --workspace --out xml -- --test-threads 1
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Generate documentation
        run: cargo doc --lib --no-deps --all-features --document-private-items
        env:
          RUSTFLAGS: --cfg docsrs
          RUSTDOCFLAGS: --cfg docsrs -Dwarnings
